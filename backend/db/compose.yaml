# Maximilian Jaramazovic
#* This Docker compose file is responsible to create the necessary infrastructure for the gains app.
#* In order to develop and test use in cli: docker compose up
#* When you are done: docker compose down
#*
#* Container Information
#! when connecting pgadmin use the container name, not address
#! in production best practice would be to change uname and pass and have them hidden too :D
#*          NAME      |     ADDRESS     |     USERNAME    |   PASSWORD
#*  postgres_container| localhost:5432  |       root      |     root
#*  pgadmin4          | localhost:80    | admin@admin.com |     root  
#
# TODO: Create backend container and frontend container
# TODO: Connect everything securely
# Maximilian Jaramazovic



version: '3'
# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  #* backend container
  # server:
  #   build:
  #     context: .
  #     target: final
  #   ports:
  #     - 8080:8080

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
    # depends_on:
    #   db:
    #     condition: service_healthy
  #* postgres container
  db:
    image: postgres:latest
    container_name: postgres_container
    restart: always
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data #persistent data
      - ./seed.pgsql:/docker-entrypoint-initdb.d/seed.sql #preseedin
      - ./exercises.json:/docker-entrypoint-initdb.d/exercises.json #preseedin

  #* pgadmin container
  pgadmin:
    container_name: pgadmin4
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "80:80"
    depends_on:
      - db
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
volumes:
  postgres_data:
# secrets:
#   db-password:
#     file: ./db/password.txt

